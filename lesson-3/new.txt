package defects.trac;

import com.accenture.tarpan.core.dictionaries.FrameAgreementTerms;
import com.accenture.tarpan.core.dictionaries.OTCDefinitions;
import com.accenture.tarpan.core.dictionaries.PackageDefinitions;
import com.accenture.tarpan.core.dictionaries.xml.billinginvoice.SectionNames;
import com.accenture.tarpan.core.process.Billing;
import com.accenture.tarpan.core.process.Offcycle;
import com.accenture.tarpan.core.testng.TestUnit;
import com.accenture.tarpan.core.utils.TimeUtils;
import com.accenture.tarpan.core.utils.Utils;
import com.accenture.tarpan.core.utils.external.RBMUtils;
import com.accenture.tarpan.model.CorrectiveInvoiceLine;
import com.accenture.tarpan.model.db.OTC;
import com.accenture.tarpan.model.db.Package;
import com.accenture.tarpan.model.db.v4_0.Account;
import com.accenture.tarpan.model.db.v4_0.Customer;
import com.accenture.tarpan.model.db.v4_0.FrameAgreement;
import com.accenture.tarpan.model.db.v4_0.FrameAgreementTerm;
import com.accenture.tarpan.model.db.v4_0.Subscription;
import com.accenture.tarpan.model.db.v4_0.TotalCommitment;
import org.testng.annotations.Test;

/**
 * @author szymon.baldyga
 */
public class T15988_Corrective_Invoice_Amount_0 extends TestUnit {

    Customer cust1;
    Account acc;
    FrameAgreement fa;
    Subscription sub;

    public final String currentDate = "20160505";

    @Test(timeOut = 40000, description = "Test Case initialization.")
    public void Init() throws Exception{
        Assert.assertTrue(true, "Initiation succesfull!");
        RBMUtils.overrideDate(Utils.ONLY_DATE.parse(currentDate));
    }

    @Test(timeOut = 40000, dependsOnMethods = {"Init"}, description = "Customer creation step")
    public void createCustomer() throws Exception {
        cust1 = new Customer();
        cust1.setSegment("SMB");
        cust1.setEffectiveDate(Utils.ONLY_DATE.parse(currentDate));
        cust1.create();
        Assert.print("Customer created");

    }

    @Test(timeOut = 40000, dependsOnMethods = {"createCustomer"}, description = "Account creation step")
    public void createAccount() throws Exception {
        acc = new Account(cust1);
        acc.setCreditClass("Gold");
        acc.setEffectiveDate(Utils.ONLY_DATE.parse(currentDate));
        acc.create();
        Assert.print("Account created");
    }

    @Test(timeOut = 40000, dependsOnMethods = {"createAccount"}, description = "FrameAgreement creation step")
    public void createFrameAgreement() throws Exception {
        fa = new FrameAgreement();
        fa.setEffectiveDate(Utils.ONLY_DATE.parse(currentDate));
        fa.setBillingAccountId(acc);
        TotalCommitment tc = new TotalCommitment(
                new FrameAgreementTerm(FrameAgreementTerms.GRACE_PERIOD, "0"),
                new FrameAgreementTerm(FrameAgreementTerms.TOTAL_COMMITMENT, "11000")
        ).setId("1");
        fa.getTotalCommitments().add(tc);
        fa.create();
        Assert.print("FrameAgreement created");
    }

    @Test(timeOut = 40000, dependsOnMethods = {"createFrameAgreement"}, description = "Subscription creation step")
    public void createSubscription() throws Exception {
        sub = new Subscription(acc);
        sub.setEffectiveDate(Utils.ONLY_DATE.parse(currentDate));
        sub.setTariffPlanRCPriceOverride(100.0);
        sub.getOTC_list().add(new OTC(OTCDefinitions.OPLATA_ZA_PRZYLACZENIE_DO_SIECI, 720.30));
//        sub.getVAS_list().add(new VAS(VASDefinitions.U1_Annopol, 50.0));
        sub.getPackage_list().add(new Package(PackageDefinitions.INTERNET_W_TELEFONIE, 567.23));
        sub.setCommitmentNumber("1");
        sub.setAgreementID(fa.getAgreementId());
        sub.create();
    }

    @Test(timeOut = 80000, dependsOnMethods = {"createSubscription"}, description = "First billing step")
    public void billing() throws Exception {
        Billing.performBilling(acc.getBillingAccountId());
    }

    @Test(timeOut = 80000, dependsOnMethods = {"billing"}, description = "add OTC and second billing")
    public void otc_bill2() throws Exception {
        sub.getOTC_list().add(new OTC(OTCDefinitions.OPLATA_ZA_PRZYLACZENIE_DO_SIECI, 720.30));
        sub.setEffectiveDate(Utils.ONLY_DATE.parse("20160606"));
        sub.getOTC_list().get(1).setEffectiveDate(Utils.ONLY_DATE.parse("20160606"));
        sub.update();
    }

    @Test(timeOut = 80000, dependsOnMethods = {"otc_bill2"}, description = "Issue corrective invoice step")
    public void issueCorrective() throws Exception {
        TimeUtils currDate = new TimeUtils(Utils.RBM_DATE_FORMAT.parse(RBMUtils.getOverridenDate()));
        currDate.addDays(17);
        RBMUtils.overrideDate(currDate);
        String invoiceNum = Billing.getNewestBillingInvoiceNumber(acc.getBillingAccountId());
        Offcycle.issueCorrectiveInvoiceAdam(
                invoiceNum,
                new CorrectiveInvoiceLine(SectionNames.ABONAMENT, -10.),
                new CorrectiveInvoiceLine(SectionNames.OPLATY_JEDNORAZOWE, 10.)
        );
    }

}
